# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RtJF_KZjPB6Z9ZBnc6khsjP9AWJvqZ6x
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import norm

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.neural_network import MLPRegressor

import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline

data = pd.read_csv('/content/drive/MyDrive/Project Dataset (insurance)-20230529T080528Z-001/dataset supermarket/supermarket_sales-Sheet1.csv')

data.columns

data.isnull().sum()

print(data.describe())

df = pd.read_csv('/content/drive/MyDrive/Project Dataset (insurance)-20230529T080528Z-001/dataset supermarket/supermarket_sales-Sheet1.csv')

# Histograms for numerical columns
numerical_columns = ['Unit price', 'Quantity', 'Tax 5%', 'Total', 'cogs', 'gross income', 'Rating']

fig, axs = plt.subplots(2, 4, figsize=(20, 10))

for i, col in enumerate(numerical_columns):
    row = i // 4
    pos = i % 4
    sns.histplot(df[col], kde=True, ax=axs[row, pos])

fig.delaxes(axs[1,3]) # we remove the last sub-plot which is empty
plt.tight_layout()
plt.show()

# Bar plots for categorical columns
categorical_columns = ['Branch', 'City', 'Customer type', 'Gender', 'Product line', 'Payment']

fig, axs = plt.subplots(2, 3, figsize=(20, 10))

for i, col in enumerate(categorical_columns):
    row = i // 3
    pos = i % 3
    sns.countplot(x=df[col], ax=axs[row, pos])

plt.tight_layout()
plt.show()

fig, axs = plt.subplots(2, 3, figsize=(20, 10))

for i, col in enumerate(['Unit price', 'Quantity', 'cogs', 'gross income', 'Rating']):
    row = i // 3
    pos = i % 3
    sns.scatterplot(x=df[col], y=df['Total'], ax=axs[row, pos])

fig.delaxes(axs[1,2]) # we remove the last sub-plot which is empty
plt.tight_layout()
plt.show()

# Bar plots for categorical columns against 'Total'
fig, axs = plt.subplots(2, 3, figsize=(20, 10))

for i, col in enumerate(['Branch', 'City', 'Customer type', 'Gender', 'Product line', 'Payment']):
    row = i // 3
    pos = i % 3
    sns.barplot(x=df[col], y=df['Total'], ax=axs[row, pos])

plt.tight_layout()
plt.show()

sns.pairplot(df[numerical_columns])
plt.show()

# Box plot for 'Product line', 'Total' and 'Gender'
plt.figure(figsize=(10, 6))
sns.boxplot(x='Product line', y='Total', hue='Gender', data=df)
plt.xticks(rotation=90)
plt.show()

# Box plot for 'Product line', 'Quantity' and 'Gender'
plt.figure(figsize=(10, 6))
sns.boxplot(x='Product line', y='Quantity', hue='Gender', data=df)
plt.xticks(rotation=90)
plt.show()

# Box plot for 'Branch', 'Total' and 'Payment'
plt.figure(figsize=(10, 6))
sns.boxplot(x='Branch', y='Total', hue='Payment', data=df)
plt.xticks(rotation=90)
plt.show()

# Box plot for 'Branch', 'Total' and 'Customer type'
plt.figure(figsize=(10, 6))
sns.boxplot(x='Branch', y='Total', hue='Customer type', data=df)
plt.xticks(rotation=90)
plt.show()

sns.pairplot(df[numerical_columns])
plt.show()

# Box plot for 'Product line', 'Total' and 'Gender'
plt.figure(figsize=(10, 6))
sns.boxplot(x='Product line', y='Total', hue='Gender', data=df)
plt.xticks(rotation=90)
plt.show()

# Box plot for 'Product line', 'Quantity' and 'Gender'
plt.figure(figsize=(10, 6))
sns.boxplot(x='Product line', y='Quantity', hue='Gender', data=df)
plt.xticks(rotation=90)
plt.show()

# Box plot for 'Branch', 'Total' and 'Payment'
plt.figure(figsize=(10, 6))
sns.boxplot(x='Branch', y='Total', hue='Payment', data=df)
plt.xticks(rotation=90)
plt.show()

# Box plot for 'Branch', 'Total' and 'Customer type'
plt.figure(figsize=(10, 6))
sns.boxplot(x='Branch', y='Total', hue='Customer type', data=df)
plt.xticks(rotation=90)
plt.show()

columns = ['Unit price', 'Total', 'Rating', 'gross income']

# Loop over the columns and plot the distribution of each variable
for col in columns:
    # Plot the distribution of the data
    sns.histplot(data[col], kde=True)

    # Fit a normal distribution to the data
    (mu, sigma) = stats.norm.fit(data[col])
    print('{}: mu = {:.2f}, sigma = {:.2f}'.format(col, mu, sigma))

    # Calculate the skewness and kurtosis of the data
    print('{}: Skewness: {:.2f}'.format(col, data[col].skew()))
    print('{}: Kurtosis: {:.2f}'.format(col, data[col].kurt()))

    # Add the fitted normal distribution to the plot
    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)
    y = stats.norm.pdf(x, mu, sigma)
    plt.plot(x, y, label='Normal fit')

    # Add labels and title to the plot
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.title('Distribution of {}'.format(col))

    # Plot the QQ-plot
    fig = plt.figure()
    stats.probplot(data[col], plot=plt)

    plt.show()

columns = ['Unit price', 'Total', 'Rating', 'gross income']

plt.figure(figsize=(20, 20))
for i, column in enumerate(columns):
    plt.subplot(len(columns), 2, i + 1)
    sns.boxplot(x='Product line', y=column, data=data, palette='coolwarm')
    sns.swarmplot(x='Product line', y=column, data=data, color='black', alpha=0.4)
    plt.title(f'{column} by Product line')
plt.tight_layout()
plt.show()

data['Time'] = pd.to_datetime(data['Time'])
data = data[(data['Time'].dt.hour >= 10) & (data['Time'].dt.hour < 21)]

#Convert 'Time' to minutes from store opening:
data['MinutesFromOpening'] = (data['Time'].dt.hour - 10) * 60 + data['Time'].dt.minute
#Create a distribution plot to visualize the transaction density:
plt.figure(figsize=(20, 10))
sns.histplot(data=data, x='MinutesFromOpening', bins=60, kde=True)
plt.title('Transaction Density Throughout Store Open Hours', fontsize=20)
plt.xlabel('Minutes From Opening (10:00)', fontsize=16)
plt.ylabel('Number of Transactions', fontsize=16)
plt.xticks(np.arange(0, 660, 60), [f"{10 + t // 60:02d}:{t % 60:02d}" for t in np.arange(0, 660, 60)])
plt.grid(True)
plt.show()

plt.figure(figsize=(12, 6))
sns.barplot(x='Product line', y='Total', hue='Gender', data=data)
plt.xticks(rotation=45)
plt.show()

g = sns.FacetGrid(data, col='Payment', row='Customer type', hue='Gender', margin_titles=True)
g.map(sns.barplot, 'Product line', 'Total')

# Set custom legend properties
g.add_legend(title='Gender', bbox_to_anchor=(1.05, 0.5), loc='center left', borderaxespad=0)

# Improve the readability of the 'Product line' labels
for ax in g.axes.flat:
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right', fontsize=10)

plt.show()

data['Date'] = pd.to_datetime(data['Date'])
weekly_data = data.groupby(['City', pd.Grouper(key='Date', freq='W')])['Total'].sum().reset_index()

mean_total_sales = weekly_data.groupby('Date')['Total'].mean().reset_index()
mean_total_sales.rename(columns={'Total': 'Mean Total Sales'}, inplace=True)

plt.figure(figsize=(20, 10))
sns.lineplot(x='Date', y='Total', hue='City', data=weekly_data, marker='o', linewidth=2.5)
plt.title('Weekly Total Sales by City', fontsize=20)
plt.xlabel('Date', fontsize=16)
plt.ylabel('Total Sales', fontsize=16)
plt.grid(True)
plt.legend(title='City', title_fontsize='13', loc='upper left', fontsize='12')
plt.show()

data['Month'] = data['Date'].dt.month

grouped_data = data.groupby(['City', 'Month'])['Total'].sum().reset_index()

plt.figure(figsize=(15, 6))
sns.barplot(x='Month', y='Total', hue='City', data=grouped_data)
plt.title('Comparison of Sales income by Month and City')
plt.xlabel('Month')
plt.ylabel('Total')
plt.legend(title='City', loc='upper right')
plt.show()

df['Date'] = pd.to_datetime(df['Date'])

# Check the date range in the dataset
date_range = df['Date'].min(), df['Date'].max()
date_range

sales_by_date = df.groupby('Date')['Total'].sum()

# Plot the total sales over time
plt.figure(figsize=(10, 6))
sns.lineplot(x=sales_by_date.index, y=sales_by_date.values)
plt.title('Total Daily Sales Over Time')
plt.xlabel('Date')
plt.ylabel('Total Sales')
plt.show()

# Aggregate the average sales by date
average_sales_by_date = df.groupby('Date')['Total'].mean()

# Plot the average sales over time
plt.figure(figsize=(10, 6))
sns.lineplot(x=average_sales_by_date.index, y=average_sales_by_date.values)
plt.title('Average Daily Sales Over Time')
plt.xlabel('Date')
plt.ylabel('Average Sales')
plt.show()

df['Day of Week'] = df['Date'].dt.day_name()

# Aggregate the total sales by day of the week
sales_by_day_of_week = df.groupby('Day of Week')['Total'].sum().reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])

# Plot the total sales by day of the week
plt.figure(figsize=(10, 6))
sns.barplot(x=sales_by_day_of_week.index, y=sales_by_day_of_week.values)
plt.title('Total Sales by Day of Week')
plt.xlabel('Day of Week')
plt.ylabel('Total Sales')
plt.show()

sales_by_date_product = df.groupby(['Date', 'Product line'])['Total'].sum().reset_index()

# Plot the total sales over time for each product line
plt.figure(figsize=(12, 8))
sns.lineplot(x='Date', y='Total', hue='Product line', data=sales_by_date_product)
plt.title('Total Daily Sales Over Time for Each Product Line')
plt.xlabel('Date')
plt.ylabel('Total Sales')
plt.show()

df['Time'] = pd.to_datetime(df['Time'])
df['Hour'] = df['Time'].dt.hour

# Aggregate the total sales by hour
sales_by_hour = df.groupby('Hour')['Total'].sum()

# Plot the total sales by hour
plt.figure(figsize=(10, 6))
sns.barplot(x=sales_by_hour.index, y=sales_by_hour.values)
plt.title('Total Sales by Hour of Day')
plt.xlabel('Hour of Day')
plt.ylabel('Total Sales')
plt.show()

sales_by_hour_product = df.groupby(['Hour', 'Product line'])['Total'].sum().reset_index()

# Plot the total sales by hour for each product line
plt.figure(figsize=(12, 8))
sns.lineplot(x='Hour', y='Total', hue='Product line', data=sales_by_hour_product)
plt.title('Total Sales by Hour for Each Product Line')
plt.xlabel('Hour of Day')
plt.ylabel('Total Sales')
plt.show()

data = pd.read_csv('/content/drive/MyDrive/Project Dataset (insurance)-20230529T080528Z-001/dataset supermarket/supermarket_sales-Sheet1.csv')

# Convert 'Date' to a datetime object
data['Date'] = pd.to_datetime(data['Date'])

# Date features
data['day_of_week'] = data['Date'].dt.dayofweek
data['day_of_month'] = data['Date'].dt.day
data['month'] = data['Date'].dt.month
data['year'] = data['Date'].dt.year

# Time features
data['Time'] = pd.to_datetime(data['Time'])
def map_time_interval(time):
    hour = time.hour
    if 6 <= hour < 12:
        return 'morning'
    elif 12 <= hour < 18:
        return 'afternoon'
    elif 18 <= hour < 24:
        return 'evening'
    else:
        return 'night'

    # Apply the function to the 'Time' column
data['time_interval'] = data['Time'].apply(map_time_interval)

# One-Hot Encoding for categorical variables
data_encoded = pd.get_dummies(data, columns=['City', 'Customer type', 'Gender', 'Product line', 'time_interval'], drop_first=True)



data_encoded.drop(['Invoice ID', 'Date', 'Time','Tax 5%','gross margin percentage','cogs','year'], axis=1, inplace=True)

non_numeric_columns = data_encoded.select_dtypes(include=['object']).columns

data_encoded = pd.get_dummies(data_encoded, columns=non_numeric_columns, drop_first=True)

X = data_encoded.drop('Rating', axis=1)
y = data_encoded['Rating']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(),
    "Random Forest": RandomForestRegressor(),
    "SVR": SVR(),
    "KNN": KNeighborsRegressor(),
    "Neural Network": MLPRegressor(max_iter=1000)
}

results = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    results[name] = r2
    print(f"{name}: {r2}")

results_df = pd.DataFrame({"Model": list(results.keys()), "R2 Score": list(results.values())})
results_df = results_df.sort_values(by="R2 Score", ascending=False)

plt.figure(figsize=(12, 6))
sns.barplot(data=results_df, x="R2 Score", y="Model", palette="viridis")
plt.title("Model R2 Score Comparison")
plt.xlabel("R2 Score")
plt.ylabel("Model")
plt.show()

